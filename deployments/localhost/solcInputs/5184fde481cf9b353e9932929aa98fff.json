{
  "language": "Solidity",
  "sources": {
    "contracts/Box.sol": {
      "content": "// contracts/Box.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n \n contract Box {\n    uint256 internal value;\n\n    event ValueChanged(uint256 newValue);\n\n    function store(uint256 newValue) public {\n        value = newValue;\n        emit ValueChanged(newValue);\n   }\n\n        function retrieve()public view returns(uint256) {\n            return value;\n        }\n\n    // Uncomment and redeploy to see the upgrade happen!\n    // // Increments the stored value by 1\n    // function increment() public {\n    //     value = value + 1;\n    //     emit ValueChanged(value);\n    // }\n\n    // Uncomment and redeploy to see the upgrade happen!\n    // replace the \"1\" with a \"2\"\n    function version() public pure returns (uint256) {\n        return 1;\n    }\n\n }"
    },
    "contracts/BoxV2.sol": {
      "content": "// contracts/Box.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n \n contract BoxV2 {\n    uint256 internal value;\n\n    event ValueChanged(uint256 newValue);\n\n    function store(uint256 newValue) public {\n        value = newValue;\n        emit ValueChanged(newValue);\n   }\n\n        function retrieve()public view returns(uint256) {\n            return value;\n        }\n\n    // Uncomment and redeploy to see the upgrade happen!\n    // // Increments the stored value by 1\n    function increment() public {\n        value = value + 1;\n        emit ValueChanged(value);\n    }\n\n    function version() public pure returns (uint256) {\n        return 1;\n    }\n\n }"
    },
    "contracts/proxy/BoxProxyAdmin.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n\n// pragma solidity ^0.8.8;\n\n// import \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// contract BoxProxyAdmin is ProxyAdmin {\n//     constructor(\n//         address /* owner */\n//     ) ProxyAdmin() {\n//         // We just need this for our hardhat tooling right now\n//     }\n// }"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}